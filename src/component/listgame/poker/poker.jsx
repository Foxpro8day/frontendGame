import axios from "axios";
import { useContext, useEffect, useState } from "react";
import { toast } from "react-toastify";
import io from "socket.io-client";
import chibiImg from "../../assets/images/chibi2.png";
import { AuthContext } from "../../Context/AuthContext";
import { XImg } from "../../graphic/gLode";
import { Achievement, Main, Roll, Rolling } from "../../graphic/gPoker";
import "./poker.scss";

// K·∫øt n·ªëi v·ªõi server Socket.io
const socket = io(process.env.REACT_APP_URL_SITE, {
  withCredentials: true, // N·∫øu server y√™u c·∫ßu g·ª≠i cookie
});

const Poker = ({ onClose }) => {
  const { user, isLoggedIn, logout } = useContext(AuthContext);
  const anonymousUser = {
    id: "anonymousUser",
    point: 0,
    // Th√™m c√°c thu·ªôc t√≠nh kh√°c n·∫øu c·∫ßn
  };
  const effectiveUser = user || anonymousUser;
  const [isRolling, setIsRolling] = useState(false);
  const [hand, setHand] = useState([
    "tenHearts",
    "jackHearts",
    "queenHearts",
    "kingHearts",
    "aceHearts",
  ]); // M·∫∑c ƒë·ªãnh 5 l√° b√†i
  const [handRank, setHandRank] = useState(""); // L∆∞u h·∫°ng b√†i
  const [winAmount, setWinAmount] = useState(0); // L∆∞u s·ªë ti·ªÅn th·∫Øng
  const [showWinEffect, setShowWinEffect] = useState(false); // ‚úÖ State hi·ªáu ·ª©ng
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [point, setPoint] = useState(effectiveUser.point || 0);

  const userId = effectiveUser.id;

  useEffect(() => {
    if (!userId) return;

    // Khi v√†o game, tham gia v√†o room ri√™ng c·ªßa user
    socket.emit("joinRoom", { userId });

    // L·∫Øng nghe s·ª± ki·ªán c·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
    socket.on("updatePoint", (data) => {
      console.log("üì© Nh·∫≠n update t·ª´ server:", data);
      setPoint(data.point); // C·∫≠p nh·∫≠t ƒëi·ªÉm tr√™n UI
    });

    return () => {
      // Cleanup khi component unmount
      socket.emit("leaveRoom", { userId });
      socket.off("updatePoint");
    };
  }, [userId]);

  useEffect(() => {
    if (isLoggedIn && effectiveUser) {
      setIsAuthenticated(true);
    } else {
      setIsAuthenticated(false);
    }
  }, [isLoggedIn, effectiveUser]);

  const handleRoll = async () => {
    if (!isAuthenticated) {
      toast.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
      return;
    }

    setIsRolling(true);

    setTimeout(async () => {
      try {
        const response = await axios.post(
          `${process.env.REACT_APP_URL_SITE}/poker/spin`,
          {
            userId: effectiveUser.id, // Thay ID ng∆∞·ªùi d√πng b·∫±ng gi√° tr·ªã th·ª±c t·∫ø
            betAmount: 1000, // Gi√° tr·ªã c∆∞·ª£c
          }
        );

        const { spinResult, handRank, winAmount } = response.data;
        const names = spinResult.map((card) => card.name);
        console.log(response.data);
        setHand(names);
        setHandRank(handRank);
        setWinAmount(winAmount);

        // ‚úÖ N·∫øu kh√¥ng ph·∫£i "NoWin", k√≠ch ho·∫°t hi·ªáu ·ª©ng
        if (handRank !== "NoWin") {
          setShowWinEffect(true);
          setTimeout(() => setShowWinEffect(false), 2000); // ·∫®n sau 2 gi√¢y
        }
      } catch (error) {
        console.error("L·ªói khi quay b√†i:", error.response.data);
      }

      setIsRolling(false);
    }, 3900); // Gi·∫£ l·∫≠p th·ªùi gian quay b√†i
  };

  return (
    <div>
      <Main
        type={isRolling ? "cardsBlur" : "cards"}
        cards={hand}
        isRolling={isRolling}
      />
      <div className="pr-mascot">
        <img src={chibiImg} />{" "}
      </div>
      <div className="pr-money">{point.toLocaleString("vi-VN")}</div>
      <XImg onClick={onClose} top={60} left={940} />

      <div className="pr-rolling">
        {isRolling ? <Rolling /> : <Roll onClick={handleRoll} />}
      </div>
      {showWinEffect && <div className="win-effect"></div>}
      {showWinEffect && <Achievement name={handRank} />}
    </div>
  );
};

export default Poker;
